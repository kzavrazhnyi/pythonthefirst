# from tkinter import *
# import time
#
# # class for placing sprites on the screen
# # клас для розміщення спрайтів на екрані
# class Coords:
#     def __init__(self, x1=0, y1=0, x2=0, y2=0):
#         self.x1 = x1
#         self.y1 = y1
#         self.x2 = x2
#         self.y2 = y2
#
# class GameOfMotion:
#     def __init__(self):
#         self.tk = Tk()
#         self.tk.title("Гра в рух")
#         self.tk.resizable(0, 0)
#         self.tk.wm_attributes("-topmost", 1)
#         self.canvas = Canvas(self.tk, width=500, height=500, \
#             highlightthickness=0)
#         self.canvas.pack()
#         self.canvas_height = 500
#         self.canvas_width = 500
#         self.tk.update()
#         # MyBackground 100 на 100 пікселів
#         # MyBackground 100 by 100 pixels
#         self.bg = PhotoImage(file="MyBackground.gif")
#         w = self.bg.width()
#         h = self.bg.height()
#         for x in range(0, 5):
#             for y in range(0, 5):
#                 self.canvas.create_image(x * w, y * h, \
#                     image=self.bg, anchor='nw')
#         self.sprites = []
#         self.running = True
#
#     def mainloop(self):
#         # Цикл while буде працювати до закриття вікна гри.
#         # Перевіряємо: властивість running одно True?
#         # Якщо так перебираємо в циклі всі спрайт зі списку sprites
#         # (Self.sprites), викликаючи для кожного з них функцію move
#         while True:
#             if self.running == True:
#                 for sprite in self.sprites:
#                     sprite.move()
#             self.tk.update_idletasks()
#             self.tk.update()
#             time.sleep(0.01)
#
# # Клас-предок всіх ігрових об'єктів Sprite (спрайт),
# # дві функції: move - для переміщення спрайту,
# # і coords, що повертає поточну позицію спрайту на ігровому екрані.
# # The ancestor class of all game objects Sprite (sprite),
# # two functions: move - to move the sprite,
# # and coords, returning the current sprite position on the game screen.
# class Sprite:
#     def __init__(self, game):
#         self.game = game
#         self.endgame = False
#         self.coordinates = None
#     def move(self):
#         pass
#     def coords(self):
#         return self.coordinates
#
# class PlatformSprite(Sprite):
#     def __init__(self, game, photo_image, x, y, width, height):
#         Sprite.__init__(self, game)
#         self.photo_image = photo_image
#         self.image = game.canvas.create_image(x, y, image=self.photo_image, anchor='nw')
#         self.coordinates = Coords(x, y, x + width, y + height)
#
# MyGame = GameOfMotion()
# # Myplatform1 100 на 10 пікселів
# Myplatform1 = PlatformSprite(MyGame, PhotoImage(file="Myplatform1.gif"), 0, 480, 100, 10)
# # Myplatform2 60 на 10 пікселів
# Myplatform5 = PlatformSprite(MyGame, PhotoImage(file="Myplatform2.gif"), 175, 350, 60, 10)
# # Myplatform3 60 на 10 пікселів
# Myplatform10 = PlatformSprite(MyGame, PhotoImage(file="Myplatform3.gif"), 230, 200, 30, 10)
# MyGame.sprites.append(Myplatform1)
# MyGame.sprites.append(Myplatform5)
# MyGame.sprites.append(Myplatform10)
# MyGame.mainloop()

# Міні завдання (Mini tasks)

# # Создаем клас Dancer з функцією руху, класс MyDancer від класу Dancer
# # з функцією LeftForward, RightForward, LeftBackward, RightBackward, dance
# # Создаем об'єкт MyNewDancer і виводимо функцію dance()
# # We create a Dancer class with move function, MyDancer class from Dancer class
# # with LeftForward, RightForward, LeftBackward, RightBackward, dance
# # Create a MyNewDancer object and call the dance() function
#
# class Dancer:
#     def move(self):
#         print('Рух')
#
# class MyDancer(Dancer):
#     def LeftForward(self):
#         print('Left forward')
#     def RightForward(self):
#         print('Right forward')
#     def LeftBackward(self):
#         print('Left back')
#     def RightBackward(self):
#         print('Right back')
#     def dance(self):
#         self.move()
#         self.LeftForward()
#         self.LeftForward()
#         self.RightForward()
#         self.RightForward()
#         self.LeftBackward()
#         self.RightBackward()
#         self.LeftForward()
#         self.RightForward()
#
# MyNewDancer = MyDancer()
# MyNewDancer.dance()

# # abs функція
# # abs function
# a = float(input("Введіть а: "))
# b = float(input("Введіть b: "))
# c = abs(a) + abs(b)
# print("abs сума: "+str(c))

# # Індексація в numpy масиві
# # Indexing in numpy array
# import numpy as np
#
# # Initial Array
# arr = np.array([[-1, 2, 0, 4],
#                 [4, -0.5, 6, 0],
#                 [2.6, 0, 7, 8],
#                 [3, -7, 4, 2.0]])
# print("Початковий масив: ")
# print(arr)
#
# # Друк діапазону масиву
# # Printing a range of Array
# # with the use of slicing method
# sliced_arr = arr[:2, ::2]
# print("\nМасив з перших 2 рядків і"
#       " чергуються стовпці (0 and 2):\n", sliced_arr)
#
# # Друкуючі елементи на конкретних індексах
# # Printing elements at specific Indices
# Index_arr = arr[[1, 1, 0, 3],
#                 [3, 2, 1, 0]]
# print("\nЕлементи в індексах (1, 3), "
#       "(1, 2), (0, 1), (3, 0):\n", Index_arr)
